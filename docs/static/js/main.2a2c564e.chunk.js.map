{"version":3,"sources":["histogram/chart.js","histogram/parse.js","distribution/chart.js","utils.js","distribution/parse.js","legend/parse.js","legend/index.js","selector.js","App.js","index.js"],"names":["HistogramBarItem","_ref","item","maxCount","count","color","react_default","a","createElement","className","title","concat","id","style","height","backgroundColor","HistogramSerie","_ref2","_ref2$serie","serie","countSum","header","bars","map","bar","key","HistogramScaleItem","_ref3","scale","bottom","HistogramScale","_ref4","scales","index","HistogramChart","_ref5","_ref5$series","series","uniq","require","idBuilders","month","date","_date$split","split","_date$split2","Object","slicedToArray","year","padStart","quarter","_date$split3","_date$split4","Math","ceil","getSeries","repos","idBuilder","fileTypes","records","reduce","obj","repo","dict","config","repoName","counts","forEach","codes","countId","push","SUM","code","keys","sort","b","localeCompare","pop","getRecords","allRecords","arr","dateA","dateB","group","sum","barIndex","previousGroup","scalesCount","rounding","1","2","3","4","5","6","parseHistogram","histogramKey","filter","fileType","isDisabled","max","apply","toConsumableArray","orderOfMagnitue","toString","length","roundingAmount","getMaxCount","valueCount","values","getScales","DistributionBarItem","width","percentage","label","DistributionSerie","distributionIsRelative","colorStyle","amountStyle","totalCount","items","DistributionChart","_ref3$series","colors","lastIndex","nextColor","next","assignedLabels","getColor","parseHorizontalStacked","horizontalKey","entries","lineInfo","toFixed","some","parseLegend","typesWithinRepos","types","flattenDeep","type","getFileTypes","LegendSerieItem","toggleItem","onClick","Legend","legend","toggleSerie","toggleFileType","Option","Select","Selector","value","onChange","options","es_select","option","lineInfos","rawData","distributionOptions","entry","histogramOptions","defaultDistribution","defaultHistogram","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","distributionKey","distributionSeries","parseDistribution","histogramSeries","toggleDistributionIsRelative","bind","assertThisInitialized","chooseDistributionKey","chooseHistogramKey","setState","objectSpread","_this$state$legend","newTypes","_this$state","es_switch","checked","checkedChildren","unCheckedChildren","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.2a2c564e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.scss';\r\n\r\nfunction HistogramBarItem({ item, maxCount }) {\r\n  const { count, color } = item;\r\n\r\n  return (\r\n    <div className=\"histogram-bar-item\" title={`${item.id}: ${count}`} style={{\r\n      height: `${(count / maxCount) * 100}%`,\r\n      backgroundColor: color\r\n    }}></div>\r\n  );\r\n}\r\n\r\nfunction HistogramSerie({ serie: { countSum, header, bars }, maxCount }) {\r\n  return (\r\n    <div className=\"histogram-serie\">\r\n      <div className=\"histogram-bar\" title={`Total: ${countSum}`}>\r\n        <div className=\"histogram-bar__sum\" style={{\r\n          height: `${(countSum / maxCount) * 100}%`\r\n        }}>\r\n          <div className=\"histogram-bar__sum-label\">{countSum}</div>\r\n        </div>\r\n        <div className=\"histogram-bar-items\">\r\n          {bars.map((bar) => <HistogramBarItem key={bar.id} item={bar} maxCount={maxCount} />)}\r\n        </div>\r\n      </div>\r\n      <div className=\"histogram-serie__header\" title={header}>{header}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction HistogramScaleItem({ scale, maxCount }) {\r\n  const style = {\r\n    bottom: `${(scale / maxCount) * 100}%`\r\n  };\r\n\r\n  return (\r\n    <div className=\"histogram-chart-scale-item\" style={style}>\r\n      <div className=\"histogram-chart-scale-item__label\">{scale}</div>\r\n      <div className=\"histogram-chart-scale-item__line\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction HistogramScale({ scales, maxCount }) {\r\n  return (\r\n    <div className=\"histogram-chart-scale\">\r\n      {scales.map((scale, index) => <HistogramScaleItem key={index} scale={scale} maxCount={maxCount}/>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function HistogramChart({ series: { series, maxCount, scales } }) {\r\n  return (\r\n    <div className=\"histogram-chart\">\r\n      <HistogramScale scales={scales} maxCount={maxCount} />\r\n      {series.map((serie) => <HistogramSerie key={serie.id} serie={serie} maxCount={maxCount} />)}\r\n    </div>\r\n  );\r\n}\r\n","const { uniq } = require('lodash');\r\n\r\nconst idBuilders = {\r\n  month(date) {\r\n    const [year, month] = date.split('-');\r\n\r\n    return `${year}-${month.padStart(2, '0')}`;\r\n  },\r\n  quarter(date) {\r\n    const [year, month] = date.split('-');\r\n\r\n    return `${year}/${Math.ceil(month / 3)}`;\r\n  },\r\n  year: (date) => date.split('-')[0]\r\n};\r\n\r\n/* TODO clean up this. */\r\nfunction getRecords(repos, idBuilder, fileTypes) {\r\n  return repos.reduce((obj, repo) => {\r\n    const dict = {};\r\n\r\n    obj[repo.config.repoName] = dict;\r\n    (repo.counts || []).forEach((count) => {\r\n      const { date, count: codes } = count;\r\n      const countId = idBuilder(date);\r\n\r\n      if (!dict[countId]) {\r\n        dict[countId] = [];\r\n      }\r\n      dict[countId].push({\r\n        date,\r\n        count: codes.SUM.code\r\n\r\n        // count: fileTypes\r\n        //   .filter((type) => !!codes[type.id])\r\n        //   .map((type) => codes[type.id].code + codes[type.id].comment)\r\n        //   .reduce((sum, type) => sum + type, 0)\r\n      });\r\n    }, {});\r\n\r\n    Object.keys(dict).forEach((key) => {\r\n      dict[key] = dict[key].sort((a, b) => a.date.localeCompare(b.date)).pop().count;\r\n    });\r\n\r\n    return obj;\r\n  }, {});\r\n}\r\n\r\nfunction getSeries(repos, idBuilder, fileTypes) {\r\n  const records = getRecords(repos, idBuilder, fileTypes);\r\n  const allRecords = repos.reduce((arr, repo) => arr.concat((repo.counts || []).map((count) => idBuilder(count.date))), []);\r\n  const uniqueRecords = uniq(allRecords.sort((dateA, dateB) => dateA.localeCompare(dateB)));\r\n  const series = uniqueRecords.map((id) => ({\r\n    id,\r\n    header: id,\r\n    countSum: 0,\r\n    bars: repos.map((repo) => ({\r\n      id: repo.config.repoName,\r\n      color: repo.config.color,\r\n      count: records[repo.config.repoName][id]\r\n    }))\r\n  }));\r\n\r\n  series.forEach((group, index) => {\r\n    group.countSum = group.bars.reduce((sum, bar, barIndex) => {\r\n      if (!bar.count) {\r\n        const previousGroup = series[index - 1];\r\n\r\n        bar.count = previousGroup ? previousGroup.bars[barIndex].count : 0;\r\n      }\r\n\r\n      return sum + bar.count;\r\n    }, 0);\r\n  });\r\n\r\n  return series;\r\n}\r\n\r\nconst singles = 1;\r\nconst tens = 10;\r\nconst hundreds = 100;\r\nconst thousands = 1000;\r\nconst scalesCount = 4;\r\n\r\nconst rounding = {\r\n  '1': singles,\r\n  '2': tens,\r\n  '3': hundreds,\r\n  '4': hundreds,\r\n  '5': thousands,\r\n  '6': thousands\r\n};\r\n\r\nfunction getMaxCount(series) {\r\n  const maxCount = Math.max(...series.map((group) => group.countSum));\r\n\r\n  const orderOfMagnitue = maxCount.toString().length;\r\n  const roundingAmount = rounding[orderOfMagnitue];\r\n\r\n  if (roundingAmount) {\r\n    return Math.ceil(maxCount / roundingAmount) * roundingAmount;\r\n  }\r\n\r\n  return roundingAmount;\r\n}\r\n\r\nfunction getScales(maxCount) {\r\n  const valueCount = maxCount > scalesCount ? scalesCount : maxCount;\r\n  const values = [maxCount];\r\n\r\n  for (let index = 1; index < valueCount; index++) {\r\n    values.push(Math.ceil(maxCount / valueCount * (valueCount - index)));\r\n  }\r\n\r\n  return values.concat(0);\r\n}\r\n\r\nexport default function parseHistogram(repos, histogramKey, fileTypes) {\r\n  const activeFileTypes = fileTypes.filter((fileType) => !fileType.isDisabled);\r\n  const idBuilder = idBuilders[histogramKey];\r\n  const series = getSeries(repos.filter((repo) => !repo.isDisabled), idBuilder, activeFileTypes);\r\n  const maxCount = getMaxCount(series);\r\n  const scales = getScales(maxCount);\r\n\r\n  return {\r\n    scales,\r\n    series,\r\n    maxCount\r\n  };\r\n}\r\n","import React from 'react';\r\nimport './styles.scss';\r\n\r\nfunction DistributionBarItem({ item }) {\r\n  const style = {\r\n    width: `${item.percentage}%`,\r\n    backgroundColor: item.color\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"distribution-bar__item\"\r\n      title={`${item.label} - ${item.count} - ${item.percentage}%`}\r\n      style={style}\r\n    >\r\n      <div>{item.label}</div>\r\n      <div>{item.count}</div>\r\n      <div>{item.percentage}%</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DistributionSerie({ serie, maxCount, distributionIsRelative }) {\r\n  const colorStyle = {\r\n    backgroundColor: serie.color\r\n  };\r\n  const amountStyle = {\r\n    width: distributionIsRelative ? `${(serie.totalCount / maxCount) * 100}%` : '100%'\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-serie\">\r\n      <div className=\"distribution-serie__header\">\r\n        <div className=\"distribution-serie__color\" style={colorStyle}></div>\r\n        <div>{serie.header}</div>\r\n        <div className=\"distribution-serie__count\">{serie.totalCount} total</div>\r\n      </div>\r\n      <div className=\"distribution-bar-items\" style={amountStyle}>\r\n        {serie.items.map((item) => <DistributionBarItem key={item.id} item={item} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function DistributionChart({ series: { series, maxCount }, distributionIsRelative }) {\r\n  return (\r\n    <div className=\"distribution-chart\">\r\n      {\r\n        series.map((serie) => <DistributionSerie\r\n          key={serie.id}\r\n          serie={serie}\r\n          maxCount={maxCount}\r\n          distributionIsRelative={distributionIsRelative}\r\n        />)\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","const colors = [\r\n  '#5CBAE6', '#B6D957', '#E9707B', '#FAC364', '#98AAFB',\r\n  '#80B877', '#D998CB', '#F2D249', '#93B9C6', '#CCC5A8'\r\n];\r\n\r\nlet lastIndex = 0;\r\n\r\nexport function nextColor() {\r\n  const next = lastIndex % colors.length;\r\n\r\n  lastIndex = lastIndex + 1;\r\n\r\n  return colors[next];\r\n}\r\n\r\nconst assignedLabels = {};\r\n\r\nexport function setColors(labels) {\r\n  return labels.reduce((obj, label) => {\r\n    if (!assignedLabels[label]) {\r\n      assignedLabels[label] = nextColor();\r\n    }\r\n\r\n    obj[label] = assignedLabels[label];\r\n\r\n    return obj;\r\n  }, {});\r\n}\r\n\r\nexport function getColor(label) {\r\n  if (!assignedLabels[label]) {\r\n    assignedLabels[label] = nextColor();\r\n  }\r\n\r\n  return assignedLabels[label];\r\n}\r\n","import { getColor } from '../utils';\r\n\r\nexport default function parseHorizontalStacked(repos, horizontalKey /* , fileTypes */) {\r\n  // const dict = fileTypes.reduce((obj, fileType) => {\r\n  //   obj[fileType] = true;\r\n  //\r\n  //   return obj;\r\n  // }, {});\r\n\r\n  const series = repos\r\n    .filter((repo) => !repo.isDisabled)\r\n    .map((repo) => {\r\n      let totalCount = 0;\r\n      const records = {};\r\n\r\n      Object.entries(repo.lineInfo[horizontalKey]).forEach(([id, count]) => {\r\n        totalCount += count;\r\n\r\n        if (records[id]) {\r\n          records[id] += count;\r\n        } else {\r\n          records[id] = count;\r\n        }\r\n      });\r\n\r\n      return {\r\n        id: repo.config.repoName,\r\n        header: repo.config.repoName,\r\n        color: repo.config.color,\r\n        totalCount,\r\n        items: Object.entries(records)\r\n          .sort((a, b) => a[0].localeCompare(b[0]))\r\n          .map(([label, count], index) => ({\r\n            id: index,\r\n            label,\r\n            count,\r\n            percentage: ((count / totalCount) * 100).toFixed(1),\r\n            color: getColor(label)\r\n          }))\r\n      };\r\n    });\r\n\r\n  const useK = series.some((serie) => serie.items.some((item) => item.count > 10000));\r\n\r\n  if (useK) {\r\n    series.forEach((serie) => serie.items.forEach((item) => {\r\n      item.count = `${(item.count / 1000).toFixed(1)}k`;\r\n    }));\r\n  }\r\n  const maxCount = Math.max(...series.map((serie) => serie.totalCount));\r\n\r\n  return {\r\n    series,\r\n    maxCount\r\n  };\r\n}\r\n","import { uniq, flattenDeep } from 'lodash';\r\nimport { getColor } from '../utils';\r\n\r\nfunction getFileTypes(repos) {\r\n  const selectedRepos = repos.filter((repo) => !repo.isDisabled);\r\n  const typesWithinRepos = selectedRepos.map((repo) => (repo.counts || []).map((item) => Object.keys(item.count)));\r\n  const types = flattenDeep(typesWithinRepos);\r\n\r\n  return uniq(types).filter((type) => type !== 'SUM').sort();\r\n}\r\n\r\nexport default function parseLegend(repos) {\r\n  const fileTypes = getFileTypes(repos).map((fileType) => ({\r\n    id: fileType,\r\n    label: fileType,\r\n    color: getColor(fileType)\r\n\r\n    // isDisabled: repo.isDisabled // TODO\r\n  }));\r\n\r\n  const series = repos.map((repo) => ({\r\n    id: repo.config.repoName,\r\n    label: repo.config.repoName,\r\n    color: repo.config.color,\r\n    isDisabled: repo.isDisabled\r\n  }));\r\n\r\n  return {\r\n    series,\r\n    fileTypes\r\n  };\r\n}\r\n","import React from 'react';\r\nimport './styles.scss';\r\n\r\nfunction LegendSerieItem({ item, toggleItem }) {\r\n  return (\r\n    <div className={`legend-serie${item.isDisabled ? ' is-disabled' : ''}`} onClick={() => toggleItem(item.id)}>\r\n      <div className=\"legend-serie__box\" style={{\r\n        backgroundColor: item.color\r\n      }}></div>\r\n      <div className=\"legend-serie__label\">{item.label}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Legend({ legend, toggleSerie, toggleFileType }) {\r\n  const { series, fileTypes } = legend;\r\n\r\n  return (\r\n    <div className=\"legend\">\r\n      <div className=\"legend-group\">\r\n        <h3 className=\"legend-group__header\">Repositories</h3>\r\n        <div className=\"legend-series\">\r\n          {series.map((item) => <LegendSerieItem key={item.id} item={item} toggleItem={toggleSerie} />)}\r\n        </div>\r\n      </div>\r\n      <div className=\"legend-group\">\r\n        <h3 className=\"legend-group__header\">File types</h3>\r\n        <div className=\"legend-series\">\r\n          {fileTypes.map((item) => <LegendSerieItem key={item.id} item={item} toggleItem={toggleFileType} />)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Select } from 'antd';\r\n\r\nconst { Option } = Select; // eslint-disable-line no-shadow\r\n\r\nexport default function Selector({ value, onChange, options }) {\r\n  return (\r\n    <Select value={value} onChange={onChange} className=\"option-selector\" >\r\n      {options.map((option) => <Option key={option}>{option}</Option>)}\r\n    </Select>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport rawData from './data.json';\r\nimport HistogramChart from './histogram/chart';\r\nimport parseHistogram from './histogram/parse';\r\nimport DistributionChart from './distribution/chart';\r\nimport parseDistribution from './distribution/parse';\r\nimport parseLegend from './legend/parse';\r\nimport Legend from './legend';\r\nimport Selector from './selector';\r\nimport { Switch } from 'antd';\r\n\r\nconst lineInfos = Object.values(rawData)[0].lineInfo;\r\nconst distributionOptions = Object.entries(lineInfos).filter((entry) => typeof entry[1] === 'object').map((entry) => entry[0]); // eslint-disable-line max-len\r\nconst histogramOptions = ['month', 'quarter', 'year'];\r\n\r\nconst defaultDistribution = 'author';\r\nconst defaultHistogram = 'month';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const repos = Object.values(rawData);\r\n    const legend = parseLegend(repos);\r\n\r\n    this.state = {\r\n      repos,\r\n      distributionKey: defaultDistribution,\r\n      distributionSeries: parseDistribution(repos, defaultDistribution, legend.fileTypes),\r\n      distributionIsRelative: true,\r\n      histogramKey: defaultHistogram,\r\n      histogramSeries: parseHistogram(repos, defaultHistogram, legend.fileTypes),\r\n      legend\r\n    };\r\n    this.toggleDistributionIsRelative = this.toggleDistributionIsRelative.bind(this);\r\n    this.chooseDistributionKey = this.chooseDistributionKey.bind(this);\r\n    this.chooseHistogramKey = this.chooseHistogramKey.bind(this);\r\n    this.toggleSerie = this.toggleSerie.bind(this);\r\n    this.toggleFileType = this.toggleFileType.bind(this);\r\n  }\r\n\r\n  chooseDistributionKey(distributionKey) {\r\n    this.setState({\r\n      distributionKey,\r\n      distributionSeries: parseDistribution(this.state.repos, distributionKey, this.state.legend.fileTypes)\r\n    });\r\n  }\r\n\r\n  chooseHistogramKey(histogramKey) {\r\n    this.setState({\r\n      histogramKey,\r\n      histogramSeries: parseHistogram(this.state.repos, histogramKey, this.state.legend.fileTypes)\r\n    });\r\n  }\r\n\r\n  toggleDistributionIsRelative(distributionIsRelative) {\r\n    this.setState({\r\n      distributionIsRelative\r\n    });\r\n  }\r\n\r\n  toggleSerie(id) {\r\n    const repos = this.state.repos.map((repo) => {\r\n      if (repo.config.repoName !== id) {\r\n        return repo;\r\n      }\r\n\r\n      return {\r\n        ...repo,\r\n        isDisabled: !repo.isDisabled\r\n      };\r\n    });\r\n\r\n    const { fileTypes } = this.state.legend;\r\n\r\n    this.setState({\r\n      repos,\r\n      histogramSeries: parseHistogram(repos, this.state.histogramKey, fileTypes),\r\n      distributionSeries: parseDistribution(repos, this.state.distributionKey, fileTypes),\r\n      legend: parseLegend(repos)\r\n    });\r\n  }\r\n\r\n  toggleFileType(id) {\r\n    const { series, fileTypes } = this.state.legend;\r\n    const newTypes = fileTypes.map((fileType) => {\r\n      if (fileType.id !== id) {\r\n        return fileType;\r\n      }\r\n\r\n      return {\r\n        ...fileType,\r\n        isDisabled: !fileType.isDisabled\r\n      };\r\n    });\r\n\r\n    this.setState({\r\n      histogramSeries: parseHistogram(this.state.repos, this.state.histogramKey, newTypes),\r\n      distributionSeries: parseDistribution(this.state.repos, this.state.distributionKey, newTypes),\r\n      legend: {\r\n        series,\r\n        fileTypes: newTypes\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      histogramKey, histogramSeries, legend,\r\n      distributionKey, distributionSeries, distributionIsRelative\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Legend legend={legend} toggleSerie={this.toggleSerie} toggleFileType={this.toggleFileType}/>\r\n        <h3 className=\"chart-header\">\r\n          History of line count by\r\n          <Selector value={histogramKey} onChange={this.chooseHistogramKey} options={histogramOptions} />\r\n        </h3>\r\n        <HistogramChart series={histogramSeries} />\r\n        <h3 className=\"chart-header\">\r\n          Origin distributon of line count by\r\n          <Selector value={distributionKey} onChange={this.chooseDistributionKey} options={distributionOptions} />\r\n          <Switch\r\n            checked={distributionIsRelative}\r\n            onChange={this.toggleDistributionIsRelative}\r\n            checkedChildren=\"Relative\"\r\n            unCheckedChildren=\"Absolute\"/>\r\n        </h3>\r\n        <DistributionChart series={distributionSeries} distributionIsRelative={distributionIsRelative} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'antd/dist/antd.css';\r\nimport './styles.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}