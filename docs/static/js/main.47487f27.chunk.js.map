{"version":3,"sources":["histogram/chart.js","histogram/parse.js","distribution/chart.js","utils.js","distribution/parse.js","legend/parse.js","legend/index.js","selector.js","App.js","index.js"],"names":["HistogramBarItem","_ref","item","maxCount","count","color","react_default","a","createElement","className","title","concat","id","style","height","backgroundColor","HistogramSerie","_ref2","_ref2$serie","serie","countSum","header","bars","map","bar","key","HistogramChart","_ref3","_ref3$series","series","uniq","require","idBuilders","month","date","_date$split","split","_date$split2","Object","slicedToArray","year","padStart","quarter","_date$split3","_date$split4","Math","ceil","getSeries","repos","idBuilder","records","reduce","obj","repo","dict","config","repoName","counts","forEach","code","SUM","countId","push","keys","sort","b","localeCompare","pop","getRecords","allRecords","arr","dateA","dateB","group","index","sum","barIndex","previousGroup","parseHistogram","histogramKey","filter","isDisabled","max","apply","toConsumableArray","DistributionBarItem","width","percentage","label","DistributionSerie","colorStyle","totalCount","items","DistributionChart","colors","lastIndex","nextColor","next","length","assignedLabels","getColor","parseHorizontalStacked","horizontalKey","entries","lineInfo","_ref4","toFixed","some","parseLegend","fileTypes","typesWithinRepos","types","flattenDeep","type","getFileTypes","fileType","LegendSerieItem","toggleItem","onClick","toggleType","alert","Legend","legend","toggleSerie","Option","Select","Selector","value","onChange","options","es_select","option","distributionOptions","histogramOptions","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","values","rawData","state","distributionKey","distributionSeries","parseDistribution","histogramSeries","chooseDistributionKey","bind","assertThisInitialized","chooseHistogramKey","setState","objectSpread","_this$state","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"oSAGA,SAASA,EAATC,GAA8C,IAAlBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,SACxBC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,MAEf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBC,MAAK,GAAAC,OAAKT,EAAKU,GAAV,MAAAD,OAAiBP,GAASS,MAAO,CACxEC,OAAM,GAAAH,OAAMP,EAAQD,EAAY,IAA1B,KACNY,gBAAiBV,KAKvB,SAASW,EAATC,GAAyE,IAAAC,EAAAD,EAA/CE,MAASC,EAAsCF,EAAtCE,SAAUC,EAA4BH,EAA5BG,OAAQC,EAAoBJ,EAApBI,KAAQnB,EAAYc,EAAZd,SAC3D,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,MAAK,UAAAC,OAAYS,IAC9Cd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBI,MAAO,CACzCC,OAAM,GAAAH,OAAMS,EAAWjB,EAAY,IAA7B,QAERG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACZa,EAAKC,IAAI,SAACC,GAAD,OAASlB,EAAAC,EAAAC,cAACR,EAAD,CAAkByB,IAAKD,EAAIZ,GAAIV,KAAMsB,EAAKrB,SAAUA,QAG3EG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BC,MAAOW,GAASA,IAKhD,SAASK,EAATC,GAA0D,IAAAC,EAAAD,EAAhCE,OAAUA,EAAsBD,EAAtBC,OAAQ1B,EAAcyB,EAAdzB,SACzD,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZoB,EAAON,IAAI,SAACJ,GAAD,OAAWb,EAAAC,EAAAC,cAACQ,EAAD,CAAgBS,IAAKN,EAAMP,GAAIO,MAAOA,EAAOhB,SAAUA,2BCjC5E2B,EAASC,EAAQ,IAAjBD,KAEFE,EAAa,CACjBC,MADiB,SACXC,GAAM,IAAAC,EACYD,EAAKE,MAAM,KADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACHK,EADGH,EAAA,GACGJ,EADHI,EAAA,GAGV,SAAA1B,OAAU6B,EAAV,KAAA7B,OAAkBsB,EAAMQ,SAAS,EAAG,OAEtCC,QANiB,SAMTR,GAAM,IAAAS,EACUT,EAAKE,MAAM,KADrBQ,EAAAN,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GACLH,EADKI,EAAA,GACCX,EADDW,EAAA,GAGZ,SAAAjC,OAAU6B,EAAV,KAAA7B,OAAkBkC,KAAKC,KAAKb,EAAQ,KAEtCO,KAAM,SAACN,GAAD,OAAUA,EAAKE,MAAM,KAAK,KA8BlC,SAASW,EAAUC,EAAOC,GACxB,IAAMC,EA3BR,SAAoBF,EAAOC,GACzB,OAAOD,EAAMG,OAAO,SAACC,EAAKC,GACxB,IAAMC,EAAO,GAoBb,OAlBAF,EAAIC,EAAKE,OAAOC,UAAYF,EAC5BD,EAAKI,OAAOC,QAAQ,SAACtD,GAAU,IACrB8B,EAAmC9B,EAAnC8B,KAAsByB,EAAavD,EAA7BA,MAASwD,IAAOD,KACxBE,EAAUZ,EAAUf,GAErBoB,EAAKO,KACRP,EAAKO,GAAW,IAElBP,EAAKO,GAASC,KAAK,CACjB5B,OACA9B,MAAOuD,KAER,IAEHrB,OAAOyB,KAAKT,GAAMI,QAAQ,SAACjC,GACzB6B,EAAK7B,GAAO6B,EAAK7B,GAAKuC,KAAK,SAACzD,EAAG0D,GAAJ,OAAU1D,EAAE2B,KAAKgC,cAAcD,EAAE/B,QAAOiC,MAAM/D,QAGpEgD,GACN,IAIagB,CAAWpB,EAAOC,GAC5BoB,EAAarB,EAAMG,OAAO,SAACmB,EAAKjB,GAAN,OAAeiB,EAAI3D,OAAO0C,EAAKI,OAAOlC,IAAI,SAACnB,GAAD,OAAW6C,EAAU7C,EAAM8B,UAAS,IAExGL,EADgBC,EAAKuC,EAAWL,KAAK,SAACO,EAAOC,GAAR,OAAkBD,EAAML,cAAcM,MACpDjD,IAAI,SAACX,GAAD,MAAS,CACxCA,KACAS,OAAQT,EACRQ,SAAU,EACVE,KAAM0B,EAAMzB,IAAI,SAAC8B,GAAD,MAAW,CACzBzC,GAAIyC,EAAKE,OAAOC,SAChBnD,MAAOgD,EAAKE,OAAOlD,MACnBD,MAAO8C,EAAQG,EAAKE,OAAOC,UAAU5C,SAgBzC,OAZAiB,EAAO6B,QAAQ,SAACe,EAAOC,GACrBD,EAAMrD,SAAWqD,EAAMnD,KAAK6B,OAAO,SAACwB,EAAKnD,EAAKoD,GAC5C,IAAKpD,EAAIpB,MAAO,CACd,IAAMyE,EAAgBhD,EAAO6C,EAAQ,GAErClD,EAAIpB,MAAQyE,EAAgBA,EAAcvD,KAAKsD,GAAUxE,MAAQ,EAGnE,OAAOuE,EAAMnD,EAAIpB,OAChB,KAGEyB,EAGM,SAASiD,EAAe9B,EAAO+B,GAC5C,IAAM9B,EAAYjB,EAAW+C,GACvBlD,EAASkB,EAAUC,EAAMgC,OAAO,SAAC3B,GAAD,OAAWA,EAAK4B,aAAahC,GAC7D9C,EAAW0C,KAAKqC,IAALC,MAAAtC,KAAIP,OAAA8C,EAAA,EAAA9C,CAAQT,EAAON,IAAI,SAACkD,GAAD,OAAWA,EAAMrD,aAEzD,MAAO,CACLS,SACA1B,mBC7EJ,SAASkF,EAATpF,GAAuC,IAARC,EAAQD,EAARC,KACvBW,EAAQ,CACZyE,MAAK,GAAA3E,OAAKT,EAAKqF,WAAV,KACLxE,gBAAiBb,EAAKG,OAGxB,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,yBACVC,MAAK,GAAAC,OAAKT,EAAKsF,MAAV,OAAA7E,OAAqBT,EAAKE,MAA1B,OAAAO,OAAqCT,EAAKqF,WAA1C,KACL1E,MAAOA,GAEPP,EAAAC,EAAAC,cAAA,WAAMN,EAAKsF,OACXlF,EAAAC,EAAAC,cAAA,WAAMN,EAAKE,OACXE,EAAAC,EAAAC,cAAA,WAAMN,EAAKqF,WAAX,MAKN,SAASE,EAATxE,GAAsC,IAATE,EAASF,EAATE,MACrBuE,EAAa,CACjB3E,gBAAiBI,EAAMd,OAGzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAA4BI,MAAO6E,IAClDpF,EAAAC,EAAAC,cAAA,WAAMW,EAAME,QACZf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAA6BU,EAAMwE,WAAlD,WAEFrF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACZU,EAAMyE,MAAMrE,IAAI,SAACrB,GAAD,OAAUI,EAAAC,EAAAC,cAAC6E,EAAD,CAAqB5D,IAAKvB,EAAKU,GAAIV,KAAMA,QAM7D,SAAS2F,EAATlE,GAAuC,IAAVE,EAAUF,EAAVE,OAC1C,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZoB,EAAON,IAAI,SAACJ,GAAD,OAAWb,EAAAC,EAAAC,cAACiF,EAAD,CAAmBhE,IAAKN,EAAMP,GAAIO,MAAOA,OC5CtE,IAAM2E,EAAS,CACb,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,WAG1CC,EAAY,EAET,SAASC,IACd,IAAMC,EAAOF,EAAYD,EAAOI,OAIhC,OAFAH,GAAwB,EAEjBD,EAAOG,GAGhB,IAAME,EAAiB,GAchB,SAASC,EAASZ,GAKvB,OAJKW,EAAeX,KAClBW,EAAeX,GAASQ,KAGnBG,EAAeX,GChCT,SAASa,EAAuBrD,EAAOsD,GACpD,IAAMzE,EAASmB,EACZgC,OAAO,SAAC3B,GAAD,OAAWA,EAAK4B,aACvB1D,IAAI,SAAC8B,GACJ,IAAIsC,EAAa,EACXzC,EAAU,GAYhB,OAVAZ,OAAOiE,QAAQlD,EAAKmD,SAASF,IAAgB5C,QAAQ,SAAAzD,GAAiB,IAAAgB,EAAAqB,OAAAC,EAAA,EAAAD,CAAArC,EAAA,GAAfW,EAAeK,EAAA,GAAXb,EAAWa,EAAA,GACpE0E,GAAcvF,EAEV8C,EAAQtC,GACVsC,EAAQtC,IAAOR,EAEf8C,EAAQtC,GAAMR,IAIX,CACLQ,GAAIyC,EAAKE,OAAOC,SAChBnC,OAAQgC,EAAKE,OAAOC,SACpBnD,MAAOgD,EAAKE,OAAOlD,MACnBsF,aACAC,MAAOtD,OAAOiE,QAAQrD,GACnBc,KAAK,SAACzD,EAAG0D,GAAJ,OAAU1D,EAAE,GAAG2D,cAAcD,EAAE,MACpC1C,IAAI,SAAAI,EAAiB+C,GAAjB,IAAA+B,EAAAnE,OAAAC,EAAA,EAAAD,CAAAX,EAAA,GAAE6D,EAAFiB,EAAA,GAASrG,EAATqG,EAAA,SAA4B,CAC/B7F,GAAI8D,EACJc,QACApF,QACAmF,YAAcnF,EAAQuF,EAAc,KAAKe,QAAQ,GACjDrG,MAAO+F,EAASZ,SAa1B,OARa3D,EAAO8E,KAAK,SAACxF,GAAD,OAAWA,EAAMyE,MAAMe,KAAK,SAACzG,GAAD,OAAUA,EAAKE,MAAQ,SAG1EyB,EAAO6B,QAAQ,SAACvC,GAAD,OAAWA,EAAMyE,MAAMlC,QAAQ,SAACxD,GAC7CA,EAAKE,MAAL,GAAAO,QAAiBT,EAAKE,MAAQ,KAAMsG,QAAQ,GAA5C,SAIG7E,cCjCM,SAAS+E,EAAY5D,GAClC,IAAM6D,EATR,SAAsB7D,GACpB,IACM8D,EADgB9D,EAAMgC,OAAO,SAAC3B,GAAD,OAAWA,EAAK4B,aACZ1D,IAAI,SAAC8B,GAAD,OAAUA,EAAKI,OAAOlC,IAAI,SAACrB,GAAD,OAAUoC,OAAOyB,KAAK7D,EAAKE,WAC1F2G,EAAQC,sBAAYF,GAE1B,OAAOhF,eAAKiF,GAAO/B,OAAO,SAACiC,GAAD,MAAmB,QAATA,IAAgBjD,OAIlCkD,CAAalE,GAAOzB,IAAI,SAAC4F,GAAD,MAAe,CACvDvG,GAAIuG,EACJ3B,MAAO2B,EACP9G,MAAO+F,EAASe,MAUlB,MAAO,CACLtF,OARamB,EAAMzB,IAAI,SAAC8B,GAAD,MAAW,CAClCzC,GAAIyC,EAAKE,OAAOC,SAChBgC,MAAOnC,EAAKE,OAAOC,SACnBnD,MAAOgD,EAAKE,OAAOlD,MACnB4E,WAAY5B,EAAK4B,cAKjB4B,oBCxBJ,SAASO,EAATnH,GAA+C,IAApBC,EAAoBD,EAApBC,KAAMmH,EAAcpH,EAAdoH,WAC/B,OACE/G,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAE,OAAiBT,EAAK+E,WAAa,eAAiB,IAAMqC,QAAS,kBAAMD,EAAWnH,EAAKU,MACrGN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBI,MAAO,CACxCE,gBAAiBb,EAAKG,SAExBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBP,EAAKsF,QAMjD,IAAM+B,EAAa,kBAAMC,MAAM,wBAEhB,SAASC,EAATxG,GAAyC,IAAvByG,EAAuBzG,EAAvByG,OAAQC,EAAe1G,EAAf0G,YAC/B9F,EAAsB6F,EAAtB7F,OAAQgF,EAAca,EAAdb,UAEhB,OACEvG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAd,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZoB,EAAON,IAAI,SAACrB,GAAD,OAAUI,EAAAC,EAAAC,cAAC4G,EAAD,CAAiB3F,IAAKvB,EAAKU,GAAIV,KAAMA,EAAMmH,WAAYM,QAGjFrH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAd,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZoG,EAAUtF,IAAI,SAACrB,GAAD,OAAUI,EAAAC,EAAAC,cAAC4G,EAAD,CAAiB3F,IAAKvB,EAAKU,GAAIV,KAAMA,EAAMmH,WAAYE,sBC5BlFK,EAAWC,IAAXD,OAEO,SAASE,EAAT7H,GAAgD,IAA5B8H,EAA4B9H,EAA5B8H,MAAOC,EAAqB/H,EAArB+H,SAAUC,EAAWhI,EAAXgI,QAClD,OACE3H,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAQH,MAAOA,EAAOC,SAAUA,EAAUvH,UAAU,mBACjDwH,EAAQ1G,IAAI,SAAC4G,GAAD,OAAY7H,EAAAC,EAAAC,cAACoH,EAAD,CAAQnG,IAAK0G,GAASA,MCErD,IAAMC,EAAsB,CAAC,SAAU,OAAQ,UAAW,SACpDC,EAAmB,CAAC,QAAS,UAAW,QAEzBC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAAlG,OAAAmG,EAAA,EAAAnG,CAAAoG,KAAAJ,GACjBE,EAAAlG,OAAAqG,EAAA,EAAArG,CAAAoG,KAAApG,OAAAsG,EAAA,EAAAtG,CAAAgG,GAAAO,KAAAH,KAAMH,IAEN,IAAMvF,EAAQV,OAAOwG,OAAOC,GAHX,OAKjBP,EAAKQ,MAAQ,CACXhG,QACAiG,gBAAiBb,EAAoB,GACrCc,mBAAoBC,EAAkBnG,EAAOoF,EAAoB,IACjErD,aAAcsD,EAAiB,GAC/Be,gBAAiBtE,EAAe9B,EAAOqF,EAAiB,IACxDX,OAAQd,EAAY5D,IAEtBwF,EAAKa,sBAAwBb,EAAKa,sBAAsBC,KAA3BhH,OAAAiH,EAAA,EAAAjH,QAAAiH,EAAA,EAAAjH,CAAAkG,KAC7BA,EAAKgB,mBAAqBhB,EAAKgB,mBAAmBF,KAAxBhH,OAAAiH,EAAA,EAAAjH,QAAAiH,EAAA,EAAAjH,CAAAkG,KAC1BA,EAAKb,YAAca,EAAKb,YAAY2B,KAAjBhH,OAAAiH,EAAA,EAAAjH,QAAAiH,EAAA,EAAAjH,CAAAkG,KAfFA,qFAkBGS,GACpBP,KAAKe,SAAS,CACZR,kBACAC,mBAAoBC,EAAkBT,KAAKM,MAAMhG,MAAOiG,gDAIzClE,GACjB2D,KAAKe,SAAS,CACZ1E,eACAqE,gBAAiBtE,EAAe4D,KAAKM,MAAMhG,MAAO+B,yCAI1CnE,GACV,IAAMoC,EAAQ0F,KAAKM,MAAMhG,MAAMzB,IAAI,SAAC8B,GAClC,OAAIA,EAAKE,OAAOC,WAAa5C,EACpByC,EAGFf,OAAAoH,EAAA,EAAApH,CAAA,GACFe,EADL,CAEE4B,YAAa5B,EAAK4B,eAItByD,KAAKe,SAAS,CACZzG,QACAoG,gBAAiBtE,EAAe9B,EAAO0F,KAAKM,MAAMjE,cAClDmE,mBAAoBC,EAAkBnG,EAAO0F,KAAKM,MAAMC,iBACxDvB,OAAQd,EAAY5D,sCAIf,IAAA2G,EACgFjB,KAAKM,MAApFjE,EADD4E,EACC5E,aAAcqE,EADfO,EACeP,gBAAiBH,EADhCU,EACgCV,gBAAiBC,EADjDS,EACiDT,mBAAoBxB,EADrEiC,EACqEjC,OAE5E,OACEpH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiH,EAAD,CAAQC,OAAQA,EAAQC,YAAae,KAAKf,cAC1CrH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,2BAEEH,EAAAC,EAAAC,cAACsH,EAAD,CAAUC,MAAOhD,EAAciD,SAAUU,KAAKc,mBAAoBvB,QAASI,KAE7E/H,EAAAC,EAAAC,cAACkB,EAAD,CAAgBG,OAAQuH,IACxB9I,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,sCAEEH,EAAAC,EAAAC,cAACsH,EAAD,CAAUC,MAAOkB,EAAiBjB,SAAUU,KAAKW,sBAAuBpB,QAASG,KAEnF9H,EAAAC,EAAAC,cAACqF,EAAD,CAAmBhE,OAAQqH,YApEFU,2BCPjCC,IAASC,OAAOxJ,EAAAC,EAAAC,cAACuJ,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.47487f27.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.scss';\r\n\r\nfunction HistogramBarItem({ item, maxCount }) {\r\n  const { count, color } = item;\r\n\r\n  return (\r\n    <div className=\"histogram-bar-item\" title={`${item.id}: ${count}`} style={{\r\n      height: `${(count / maxCount) * 100}%`,\r\n      backgroundColor: color\r\n    }}></div>\r\n  );\r\n}\r\n\r\nfunction HistogramSerie({ serie: { countSum, header, bars }, maxCount }) {\r\n  return (\r\n    <div className=\"histogram-serie\">\r\n      <div className=\"histogram-bar\" title={`Total: ${countSum}`}>\r\n        <div className=\"histogram-bar__sum\" style={{\r\n          height: `${(countSum / maxCount) * 100}%`\r\n        }}></div>\r\n        <div className=\"histogram-bar-items\">\r\n          {bars.map((bar) => <HistogramBarItem key={bar.id} item={bar} maxCount={maxCount} />)}\r\n        </div>\r\n      </div>\r\n      <div className=\"histogram-serie__header\" title={header}>{header}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function HistogramChart({ series: { series, maxCount } }) {\r\n  return (\r\n    <div className=\"histogram-chart\">\r\n      {series.map((serie) => <HistogramSerie key={serie.id} serie={serie} maxCount={maxCount} />)}\r\n    </div>\r\n  );\r\n}\r\n","const { uniq } = require('lodash');\r\n\r\nconst idBuilders = {\r\n  month(date) {\r\n    const [year, month] = date.split('-');\r\n\r\n    return `${year}-${month.padStart(2, '0')}`;\r\n  },\r\n  quarter(date) {\r\n    const [year, month] = date.split('-');\r\n\r\n    return `${year}/${Math.ceil(month / 3)}`;\r\n  },\r\n  year: (date) => date.split('-')[0]\r\n};\r\n\r\n/* TODO clean up this. */\r\nfunction getRecords(repos, idBuilder) {\r\n  return repos.reduce((obj, repo) => {\r\n    const dict = {};\r\n\r\n    obj[repo.config.repoName] = dict;\r\n    repo.counts.forEach((count) => {\r\n      const { date, count: { SUM: { code } } } = count;\r\n      const countId = idBuilder(date);\r\n\r\n      if (!dict[countId]) {\r\n        dict[countId] = [];\r\n      }\r\n      dict[countId].push({\r\n        date,\r\n        count: code\r\n      });\r\n    }, {});\r\n\r\n    Object.keys(dict).forEach((key) => {\r\n      dict[key] = dict[key].sort((a, b) => a.date.localeCompare(b.date)).pop().count;\r\n    });\r\n\r\n    return obj;\r\n  }, {});\r\n}\r\n\r\nfunction getSeries(repos, idBuilder) {\r\n  const records = getRecords(repos, idBuilder);\r\n  const allRecords = repos.reduce((arr, repo) => arr.concat(repo.counts.map((count) => idBuilder(count.date))), []);\r\n  const uniqueRecords = uniq(allRecords.sort((dateA, dateB) => dateA.localeCompare(dateB)));\r\n  const series = uniqueRecords.map((id) => ({\r\n    id,\r\n    header: id,\r\n    countSum: 0,\r\n    bars: repos.map((repo) => ({\r\n      id: repo.config.repoName,\r\n      color: repo.config.color,\r\n      count: records[repo.config.repoName][id]\r\n    }))\r\n  }));\r\n\r\n  series.forEach((group, index) => {\r\n    group.countSum = group.bars.reduce((sum, bar, barIndex) => {\r\n      if (!bar.count) {\r\n        const previousGroup = series[index - 1];\r\n\r\n        bar.count = previousGroup ? previousGroup.bars[barIndex].count : 0;\r\n      }\r\n\r\n      return sum + bar.count;\r\n    }, 0);\r\n  });\r\n\r\n  return series;\r\n}\r\n\r\nexport default function parseHistogram(repos, histogramKey) {\r\n  const idBuilder = idBuilders[histogramKey];\r\n  const series = getSeries(repos.filter((repo) => !repo.isDisabled), idBuilder);\r\n  const maxCount = Math.max(...series.map((group) => group.countSum));\r\n\r\n  return {\r\n    series,\r\n    maxCount\r\n  };\r\n}\r\n","import React from 'react';\r\nimport './styles.scss';\r\n\r\nfunction DistributionBarItem({ item }) {\r\n  const style = {\r\n    width: `${item.percentage}%`,\r\n    backgroundColor: item.color\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"distribution-bar__item\"\r\n      title={`${item.label} - ${item.count} - ${item.percentage}%`}\r\n      style={style}\r\n    >\r\n      <div>{item.label}</div>\r\n      <div>{item.count}</div>\r\n      <div>{item.percentage}%</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DistributionSerie({ serie }) {\r\n  const colorStyle = {\r\n    backgroundColor: serie.color\r\n  };\r\n\r\n  return (\r\n    <div className=\"distribution-serie\">\r\n      <div className=\"distribution-serie__header\">\r\n        <div className=\"distribution-serie__color\" style={colorStyle}></div>\r\n        <div>{serie.header}</div>\r\n        <div className=\"distribution-serie__count\">{serie.totalCount} lines</div>\r\n      </div>\r\n      <div className=\"distribution-bar-items\">\r\n        {serie.items.map((item) => <DistributionBarItem key={item.id} item={item} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function DistributionChart({ series }) {\r\n  return (\r\n    <div className=\"distribution-chart\">\r\n      {series.map((serie) => <DistributionSerie key={serie.id} serie={serie} />)}\r\n    </div>\r\n  );\r\n}\r\n","const colors = [\r\n  '#5CBAE6', '#B6D957', '#E9707B', '#FAC364', '#98AAFB',\r\n  '#80B877', '#D998CB', '#F2D249', '#93B9C6', '#CCC5A8'\r\n];\r\n\r\nlet lastIndex = 0;\r\n\r\nexport function nextColor() {\r\n  const next = lastIndex % colors.length;\r\n\r\n  lastIndex = lastIndex + 1;\r\n\r\n  return colors[next];\r\n}\r\n\r\nconst assignedLabels = {};\r\n\r\nexport function setColors(labels) {\r\n  return labels.reduce((obj, label) => {\r\n    if (!assignedLabels[label]) {\r\n      assignedLabels[label] = nextColor();\r\n    }\r\n\r\n    obj[label] = assignedLabels[label];\r\n\r\n    return obj;\r\n  }, {});\r\n}\r\n\r\nexport function getColor(label) {\r\n  if (!assignedLabels[label]) {\r\n    assignedLabels[label] = nextColor();\r\n  }\r\n\r\n  return assignedLabels[label];\r\n}\r\n","import { getColor } from '../utils';\r\n\r\nexport default function parseHorizontalStacked(repos, horizontalKey) {\r\n  const series = repos\r\n    .filter((repo) => !repo.isDisabled)\r\n    .map((repo) => {\r\n      let totalCount = 0;\r\n      const records = {};\r\n\r\n      Object.entries(repo.lineInfo[horizontalKey]).forEach(([id, count]) => {\r\n        totalCount += count;\r\n\r\n        if (records[id]) {\r\n          records[id] += count;\r\n        } else {\r\n          records[id] = count;\r\n        }\r\n      });\r\n\r\n      return {\r\n        id: repo.config.repoName,\r\n        header: repo.config.repoName,\r\n        color: repo.config.color,\r\n        totalCount,\r\n        items: Object.entries(records)\r\n          .sort((a, b) => a[0].localeCompare(b[0]))\r\n          .map(([label, count], index) => ({\r\n            id: index,\r\n            label,\r\n            count,\r\n            percentage: ((count / totalCount) * 100).toFixed(1),\r\n            color: getColor(label)\r\n          }))\r\n      };\r\n    });\r\n\r\n  const useK = series.some((serie) => serie.items.some((item) => item.count > 10000));\r\n\r\n  if (useK) {\r\n    series.forEach((serie) => serie.items.forEach((item) => {\r\n      item.count = `${(item.count / 1000).toFixed(1)}k`;\r\n    }));\r\n  }\r\n\r\n  return series;\r\n}\r\n","import { uniq, flattenDeep } from 'lodash';\r\nimport { getColor } from '../utils';\r\n\r\nfunction getFileTypes(repos) {\r\n  const selectedRepos = repos.filter((repo) => !repo.isDisabled);\r\n  const typesWithinRepos = selectedRepos.map((repo) => repo.counts.map((item) => Object.keys(item.count)));\r\n  const types = flattenDeep(typesWithinRepos);\r\n\r\n  return uniq(types).filter((type) => type !== 'SUM').sort();\r\n}\r\n\r\nexport default function parseLegend(repos) {\r\n  const fileTypes = getFileTypes(repos).map((fileType) => ({\r\n    id: fileType,\r\n    label: fileType,\r\n    color: getColor(fileType)\r\n  }));\r\n\r\n  const series = repos.map((repo) => ({\r\n    id: repo.config.repoName,\r\n    label: repo.config.repoName,\r\n    color: repo.config.color,\r\n    isDisabled: repo.isDisabled\r\n  }));\r\n\r\n  return {\r\n    series,\r\n    fileTypes\r\n  };\r\n}\r\n","import React from 'react';\r\nimport './styles.scss';\r\n\r\nfunction LegendSerieItem({ item, toggleItem }) {\r\n  return (\r\n    <div className={`legend-serie${item.isDisabled ? ' is-disabled' : ''}`} onClick={() => toggleItem(item.id)}>\r\n      <div className=\"legend-serie__box\" style={{\r\n        backgroundColor: item.color\r\n      }}></div>\r\n      <div className=\"legend-serie__label\">{item.label}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* TODO */\r\nconst toggleType = () => alert('Not implemented yet'); // eslint-disable-line no-alert\r\n\r\nexport default function Legend({ legend, toggleSerie }) {\r\n  const { series, fileTypes } = legend;\r\n\r\n  return (\r\n    <div className=\"legend\">\r\n      <div className=\"legend-group\">\r\n        <h3 className=\"legend-group__header\">Repositories</h3>\r\n        <div className=\"legend-series\">\r\n          {series.map((item) => <LegendSerieItem key={item.id} item={item} toggleItem={toggleSerie} />)}\r\n        </div>\r\n      </div>\r\n      <div className=\"legend-group\">\r\n        <h3 className=\"legend-group__header\">File types</h3>\r\n        <div className=\"legend-series\">\r\n          {fileTypes.map((item) => <LegendSerieItem key={item.id} item={item} toggleItem={toggleType} />)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Select } from 'antd';\r\n\r\nconst { Option } = Select; // eslint-disable-line no-shadow\r\n\r\nexport default function Selector({ value, onChange, options }) {\r\n  return (\r\n    <Select value={value} onChange={onChange} className=\"option-selector\" >\r\n      {options.map((option) => <Option key={option}>{option}</Option>)}\r\n    </Select>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport rawData from './data.json';\r\nimport HistogramChart from './histogram/chart';\r\nimport parseHistogram from './histogram/parse';\r\nimport DistributionChart from './distribution/chart';\r\nimport parseDistribution from './distribution/parse';\r\nimport parseLegend from './legend/parse';\r\nimport Legend from './legend';\r\nimport Selector from './selector';\r\n\r\nconst distributionOptions = ['author', 'year', 'quarter', 'month'];\r\nconst histogramOptions = ['month', 'quarter', 'year'];\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const repos = Object.values(rawData);\r\n\r\n    this.state = {\r\n      repos,\r\n      distributionKey: distributionOptions[0],\r\n      distributionSeries: parseDistribution(repos, distributionOptions[0]),\r\n      histogramKey: histogramOptions[0],\r\n      histogramSeries: parseHistogram(repos, histogramOptions[0]),\r\n      legend: parseLegend(repos)\r\n    };\r\n    this.chooseDistributionKey = this.chooseDistributionKey.bind(this);\r\n    this.chooseHistogramKey = this.chooseHistogramKey.bind(this);\r\n    this.toggleSerie = this.toggleSerie.bind(this);\r\n  }\r\n\r\n  chooseDistributionKey(distributionKey) {\r\n    this.setState({\r\n      distributionKey,\r\n      distributionSeries: parseDistribution(this.state.repos, distributionKey)\r\n    });\r\n  }\r\n\r\n  chooseHistogramKey(histogramKey) {\r\n    this.setState({\r\n      histogramKey,\r\n      histogramSeries: parseHistogram(this.state.repos, histogramKey)\r\n    });\r\n  }\r\n\r\n  toggleSerie(id) {\r\n    const repos = this.state.repos.map((repo) => {\r\n      if (repo.config.repoName !== id) {\r\n        return repo;\r\n      }\r\n\r\n      return {\r\n        ...repo,\r\n        isDisabled: !repo.isDisabled\r\n      };\r\n    });\r\n\r\n    this.setState({\r\n      repos,\r\n      histogramSeries: parseHistogram(repos, this.state.histogramKey),\r\n      distributionSeries: parseDistribution(repos, this.state.distributionKey),\r\n      legend: parseLegend(repos)\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { histogramKey, histogramSeries, distributionKey, distributionSeries, legend } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Legend legend={legend} toggleSerie={this.toggleSerie}/>\r\n        <h3 className=\"chart-header\">\r\n          History of line count by\r\n          <Selector value={histogramKey} onChange={this.chooseHistogramKey} options={histogramOptions} />\r\n        </h3>\r\n        <HistogramChart series={histogramSeries} />\r\n        <h3 className=\"chart-header\">\r\n          Origin distributon of line count by\r\n          <Selector value={distributionKey} onChange={this.chooseDistributionKey} options={distributionOptions} />\r\n        </h3>\r\n        <DistributionChart series={distributionSeries} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'antd/dist/antd.css';\r\nimport './styles.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}